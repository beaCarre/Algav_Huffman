package algo;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

public class ArbreHuffman {

	private static final int taille = 256;

	private Feuille[] feuilles;
	private Element racine;

	public ArbreHuffman() {
		feuilles = new Feuille[taille];
		Feuille diese = new Feuille('#');
		racine = diese;
		feuilles['#'] = diese;
		racine.setPoids(0);
	}

	private void traitement(Element Q) {
		if (Q == null) {
			return;
		} else if (estIncrementable(Q)) {
			incrementeChemin(Q);
		} else {
			Element m = premierIndice(Q);
			Element b = finBloc(m);
			incrementeChemin(Q, m);

			changerSousArbres(m, b);
			traitement(m.getPere());

		}
	}

	public void modification(char symbole) {
		Element Q = feuilles[symbole];
		Element diese = feuilles['#'];

		// si symbole n'est pas dans l'arbre
		if (Q == null) {
			Feuille f = new Feuille(symbole);

			Noeud nouveauNoeud = new Noeud(diese, f);

			// update de f
			f.setPere(nouveauNoeud);
			feuilles[symbole] = f;

			if (this.racine == diese) {
				diese.setPere(nouveauNoeud);
				this.racine = nouveauNoeud;
			} else {
				Noeud tmp = diese.getPere();
				tmp.setFilsGauche(nouveauNoeud);
				nouveauNoeud.setPere(tmp);
				diese.setPere(nouveauNoeud);
				nouveauNoeud.setSuiv(diese.getSuiv());
				Q = tmp;
			}

			diese.setSuiv(f);
			f.setSuiv(nouveauNoeud);

		} else {
			if (Q.getPere() == diese.getPere() && Q.getPere() == finBloc(Q)) {
				Q = Q.getPere();
			}
		}

		traitement(Q);
	}

	private Element finBloc(Element m) {
		for (; m != racine; m = m.getSuiv())
			if (m.getPoids() < m.getSuiv().getPoids())
				return m;
		return m;
	}

	private boolean estIncrementable(Element e) {
		for (; e != racine; e = e.getPere()) {
			if (e.getPoids() >= e.getSuiv().getPoids())
				return false;
		}
		return true;
	}

	private void incrementeChemin(Element e) {
		this.incrementeChemin(e, racine);
	}

	private void incrementeChemin(Element e, Element m) {
		for (;; e = e.getPere()) {
			e.incrPoids();
			if (e == m)
				return;
		}
	}

	private Element premierIndice(Element e) {
		for (; e != racine; e = e.getPere())
			if (e.getPoids() == e.getSuiv().getPoids())
				return e;
		return e;
	}

	public static String parcoursInfixe(Element a) {
		if (a instanceof Feuille) {
			Feuille f = (Feuille) a;
			return "(" + f.getSymbole() + "," + f.getPoids() + ")";
		} else {
			Noeud n = (Noeud) a;
			return parcoursInfixe(n.getFilsGauche()) + "[" + n.getPoids() + "]"
					+ parcoursInfixe(n.getFilsDroit());
		}
	}

	private void changerSousArbres(Element premIndice, Element finBloc) {
		// Swap des deux arbres

		// On met à jour les fils des pères
		if (premIndice.estFilsGauche() && finBloc.estFilsGauche()) {
			premIndice.getPere().setFilsGauche(finBloc);
			finBloc.getPere().setFilsGauche(premIndice);
		} else if (premIndice.estFilsGauche() && !finBloc.estFilsGauche()) {
			premIndice.getPere().setFilsGauche(finBloc);
			finBloc.getPere().setFilsDroit(premIndice);
		} else if (!premIndice.estFilsGauche() && finBloc.estFilsGauche()) {
			premIndice.getPere().setFilsDroit(finBloc);
			finBloc.getPere().setFilsGauche(premIndice);
		} else {
			premIndice.getPere().setFilsDroit(finBloc);
			finBloc.getPere().setFilsDroit(premIndice);
		}

		// On inverse les pères
		Noeud pereFinBloc = finBloc.getPere();
		finBloc.setPere(premIndice.getPere());
		premIndice.setPere(pereFinBloc);

		// On met à jour les suivants
		updateNoeuds();
	}

	// Mets � jour tous les suivants, version brute-force
	// Y a peut-�tre plus efficace => pas le temps
	// -> teta(n)
	private void updateNoeuds() {
		List<Couple<Integer, Element>> liste = new ArrayList<Couple<Integer, Element>>();
		parcoursLargeur(racine, 0, liste);
		Map<Integer, List<Element>> hmap = new HashMap<Integer, List<Element>>();
		int max = 0;
		for (Couple<Integer, Element> c : liste) {
			if (hmap.get(c.niveau) == null) {
				hmap.put(c.niveau, new ArrayList<Element>());
			}
			hmap.get(c.niveau).add(c.noeud);
			if (c.niveau > max) {
				max = c.niveau;
			}
		}

		Element n = null;
		for (int i = max; i >= 0; i--) {
			for (Element e : hmap.get(i)) {
				if (n != null)
					n.setSuiv(e);
				n = e;
			}
		}
	}

	class Couple<T, V> {

		public T niveau;
		public V noeud;

		public Couple(T niveau, V noeud) {
			this.niveau = niveau;
			this.noeud = noeud;
		}
	}

	private void parcoursLargeur(Element a, int niveau,
			List<Couple<Integer, Element>> liste) {
		if (a instanceof Feuille) {
			liste.add(new Couple<Integer, Element>(niveau, a));
		} else {
			Noeud n = (Noeud) a;
			liste.add(new Couple<Integer, Element>(niveau, a));
			parcoursLargeur(n.getFilsGauche(), niveau + 1, liste);
			parcoursLargeur(n.getFilsDroit(), niveau + 1, liste);
		}

	}

	// affichage => teta(n)
	public String toString() {
		StringBuilder str = new StringBuilder();

		List<Couple<Integer, Element>> liste = new ArrayList<Couple<Integer, Element>>();
		parcoursLargeur(racine, 0, liste);
		Map<Integer, List<Element>> hmap = new HashMap<Integer, List<Element>>();
		int max = 0;
		for (Couple<Integer, Element> c : liste) {
			if (hmap.get(c.niveau) == null) {
				hmap.put(c.niveau, new ArrayList<Element>());
			}
			hmap.get(c.niveau).add(c.noeud);
			if (c.niveau > max) {
				max = c.niveau;
			}
		}

		for (int i = 0; i <= max; i++) {
			for (Element e : hmap.get(i)) {
				if (e instanceof Feuille) {
					Feuille f = (Feuille) e;
					str.append("(" + f.getSymbole() + "," + f.getPoids()
							+ ")\t");
				} else {
					Noeud n = (Noeud) e;
					str.append("[" + n.getPoids() + "]\t");
				}
			}
			str.append("\n");
		}

		return str.toString();
	}

	public boolean estPresent(char symbole) {
		return feuilles[symbole] != null;
	}

	public boolean estDiese() {
		return this.racine == feuilles['#'];
	}

	public Collection<Boolean> getCode(char symbole) {
		List<Boolean> chemin = new LinkedList<Boolean>();
		for (Element f = feuilles[symbole]; f != racine; f = f.getPere())
			chemin.add(!f.estFilsGauche());

		Collections.reverse(chemin);
		return chemin;
	}

	public boolean estCheminComplet(Collection<Boolean> chemin) {
		Element e = racine;
		for (Boolean b : chemin) {
			if (e instanceof Feuille)
				return true;
			else if (b)
				e = ((Noeud) e).getFilsDroit();
			else
				e = ((Noeud) e).getFilsGauche();
		}
		return false;
	}

	public char recupererFeuille(LinkedList<Boolean> chemin) {
		Element e = racine;
		while (true) {
			if (e instanceof Feuille)
				return ((Feuille) e).getSymbole();
			else if (chemin.pop())
				e = ((Noeud) e).getFilsDroit();
			else
				e = ((Noeud) e).getFilsGauche();
		}
	}

	public Element getRacine() {
		return racine;
	}

}

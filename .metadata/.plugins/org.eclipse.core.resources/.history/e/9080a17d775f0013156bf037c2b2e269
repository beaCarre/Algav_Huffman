package algo;

import java.io.IOException;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;

public class GestionnaireBit {

	private LinkedList<Byte> liste;
	private Byte current;
	private int indexCurrent;

	public GestionnaireBit() {
		liste = new LinkedList<Byte>();
		current = 0;
		indexCurrent = 0;
	}

	public void transmettreSymbole(char symbole) {
		transmettreChemin(byteToBooleanList((byte) symbole));
	}

	public void transmettreChemin(Collection<Boolean> chemin) {

		for (Boolean b : chemin) {
			if (b) {
				Byte comp = (byte) (1 << (7 - indexCurrent));
				current = (byte) (current.byteValue() | (byte) comp);
			}

			if (++indexCurrent == 8) {
				liste.add(current);
				indexCurrent = 0;
				current = 0;
			}
		}

	}

	public void finirTransmission(int nbTransmissions) {
		if (indexCurrent != 0) {
			liste.add(current);
		}
		for (int i = 0; i < 4; i++) {
			byte b = (byte) (nbTransmissions << (3 - i) * 8 >> 24);
			liste.push(b);
		}
	}

	public void ecrireDansFichier(OutputStream out) throws IOException {
		for (Byte b : liste) {
			out.write(new byte[] { b });
		}
		out.close();
	}

	public static Collection<Boolean> byteToBooleanList(byte b) {
		Collection<Boolean> tmp = new ArrayList<Boolean>();

		// on parcourt le caractï¿½re pour construire la liste
		char comp = 1 << 7;
		for (int i = 0; i < 8; i++) {
			tmp.add((b & comp) != 0);
			comp >>= 1;
		}

		return tmp;
	}

	public static char booleanListToChar(LinkedList<Boolean> bitList) {
		char c = 0;
		for (int i = 0; i < 8; i++) {
			boolean b = bitList.pop();
			if (b)
				c |= (1 << (7 - i));
		}

		return c;
	}

	public static void showBits(Collection<Boolean> bitList) {
		for (boolean b : bitList) {
			System.out.print(b ? "1" : "0");
		}

	}
}
